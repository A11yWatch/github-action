name: A11yWatch - The Accessibility Suite
on: [pull_request, push]
author: A11yWatch
branding:
  icon: "shield"
  color: "gray-dark"
description: Setup A11yWatch CLI in your GitHub Actions workflow.
inputs:
  WEBSITE_URL:
    description: Website domain to scan
    required: true
  EXTERNAL:
    description: Use the A11yWatch external api hosted.
    required: false
    default: ""
  FAIL_ERROR_COUNT:
    description: Use to fail the CI if the amount of issues is greater than the count.
    required: false
    default: ""
  DISABLE_PR_STATS:
    description: Disable the A11yWatch bot from posting on your PR.
    required: false
    default: ""
  TOKEN:
    description: The github token to use for the pr.
    required: false
    default: ""
  ACTOR:
    description: The user who triggered the pr or app.
    required: false
    default: ""
outputs:
  results:
    description: "Website Results"
    value: ${{ steps.a11ywatch-results-generator.outputs.results }}
  issues:
    description: "The amount of issues found on the page"
    value: ${{ steps.a11ywatch-results-generator.outputs.issues }}
runs:
  using: composite
  steps:
    - uses: actions/cache@v2
      id: cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Rust
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y

    - name: Install the A11yWatch CLI
      shell: bash
      run: cargo install a11ywatch_cli --force

    - name: Start A11yWatch Service
      if: ${{ !inputs.EXTERNAL }}
      shell: bash
      run: a11ywatch start

    - name: Wait for Healthy Container
      if: ${{ !inputs.EXTERNAL }}
      shell: bash
      run: |
        attempt=0

        while [ $attempt -le 10 ]; do
            attempt=$(( $attempt + 1 ))
            echo "Waiting for server to be up (attempt: $attempt)..."
            result=$(docker logs api)
            if grep -q 'Server ready' <<< $result ; then
              echo "A11yWatch ready!"
              break
            fi
            sleep 0.3
        done

    - name: A11ywatch Scan
      id: a11ywatch-results-generator
      shell: bash
      run: |
        # run scan request
        ext_var=${{ inputs.EXTERNAL }}
        external_env=${ext_var:-"false"}

        if [ "$external_env" = "true" ]; then
          # run remote scan via a11ywatch.com
          a11ywatch scan --url "${{ inputs.WEBSITE_URL }}" --external --save
        else
          a11ywatch scan --url "${{ inputs.WEBSITE_URL }}" --save
        fi

        results_path="$(a11ywatch --find-results)"

        website_issues=$(jq '.website.issue | length' $results_path)
        error_limit=${{ inputs.FAIL_ERROR_COUNT }}
        error_count=${error_limit:-0}

        if [ "$website_issues" -gt 0 ]; then
          echo "Issues detected: $website_issues"

          if [ "$error_count" -gt 0 ]; then
            if [ $website_issues -gt "$error_count" ]; then
                echo "Failed accessibility test!"
                exit 1
            fi
          fi
        fi

        JSON="$(cat $temp_folder_results)"
        results_json="$(a11ywatch -r)"

        echo "::set-output name=results::$(echo ${results_json})"
        echo "::set-output name=issues::$(echo ${website_issues})"

    - name: Post Stats to GitHub PR
      shell: bash
      if: ${{ !inputs.DISABLE_PR_STATS }}
      run: |
        # get github results
        GH_TOKEN="${{ inputs.TOKEN }}"
        GH_USER="${{ inputs.ACTOR }}"
        TOKEN=${GH_TOKEN:GITHUB_TOKEN}
        USER=${GH_USER:GITHUB_ACTOR}

        echo "test env var output $GITHUB_TOKEN"
        echo "test var output $TOKEN"
        echo "test env var output user $GITHUB_ACTOR"
        echo "test var output user $USER"

        results_path="$(a11ywatch --find-results)"
        gh_api_url="$(a11ywatch --github-api-url)"

        # check for open pr
        pr_response=$(curl --location --request GET $gh_api_url \
            -u $USER:$TOKEN)

        if [ $(echo $pr_response | jq length) -eq 0 ]; then
          echo "No PR found to update"
        else          
          pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")

          body="$(a11ywatch extract -p github)"

          # post comment to github
          curl --location --request POST "$pr_comment_url" \
            -u $USER:$TOKEN \
            --header 'Content-Type: application/json' \
            --data-raw "$body"
        fi

    - name: Stop A11yWatch Service
      if: ${{ !inputs.EXTERNAL }}
      shell: bash
      run: a11ywatch stop
