name: A11yWatch - The Accessibility Suite
on:
  push:
    branches: [$default-branch]
  pull_request:
    branches: [$default-branch]
author: A11yWatch
branding:
  icon: "shield"
  color: "gray-dark"
description: Setup A11yWatch CLI in your GitHub Actions workflow.
inputs:
  WEBSITE_URL:
    description: Website domain to scan
    required: true
  EXTERNAL:
    description: Use the A11yWatch external api hosted.
    required: false
    default: false
  SITE_WIDE:
    description: Perform a site-wide scan.
    required: false
    default: false
  FAIL_ERROR_COUNT:
    description: Use to fail the CI if the amount of issues is greater than the count.
    required: false
    default: 0
  DISABLE_PR_STATS:
    description: Disable the A11yWatch bot from posting on your PR.
    required: false
    default: false
  TOKEN:
    description: The github token to use for posting comments and issues.
    required: false
    default: ""
  A11YWATCH_TOKEN:
    description: The a11ywatch token to use for authenticated to the API.
    required: false
    default: ""
outputs:
  results:
    description: "Website Results"
    value: ${{ steps.a11ywatch-results-generator.outputs.results }}
  issues:
    description: "The amount of issues found on the page"
    value: ${{ steps.a11ywatch-results-generator.outputs.issues }}
runs:
  using: composite
  steps:
    - uses: actions/cache@v3
      id: cache
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Rust
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y

    - name: Install the A11yWatch CLI
      shell: bash
      run: cargo install a11ywatch_cli --force

    - name: Configure CLI creds
      if: ${{ inputs.A11YWATCH_TOKEN }}
      shell: bash
      run: a11ywatch --set-token ${{ inputs.A11YWATCH_TOKEN }}

    - name: Increase TCP limits
      if: ${{ inputs.EXTERNAL == 'false' && inputs.SITE_WIDE == 'true' }}
      shell: bash
      run: |
        # increase Linux TCP buffer limits
        sudo sysctl -w net.core.rmem_max=2097152
        sudo sysctl -w net.core.wmem_max=2097152

        # increase Linux autotuning TCP buffer limits
        sudo sysctl -w net.ipv4.tcp_rmem="4096 87380 2097152"
        sudo sysctl -w net.ipv4.tcp_wmem="4096 65536 2097152"
        sudo sysctl --system

    - name: Start A11yWatch Service
      if: ${{ inputs.EXTERNAL == 'false' }}
      shell: bash
      run: a11ywatch start

    - name: Wait for Healthy Container
      if: ${{ inputs.EXTERNAL == 'false' }}
      shell: bash
      run: |
        attempt=0

        while [ $attempt -le 10 ]; do
            attempt=$(( $attempt + 1 ))
            echo "Waiting for server to be up (attempt: $attempt)..."
            result=$(docker logs api)
            if grep -q 'Server ready' <<< $result ; then
              # perform slight setup delay for gRPC instance
              sleep 5
              echo "A11yWatch ready!"
              break
            fi
            sleep 0.3
        done

    - name: A11yWatch Scan [Local]
      if: ${{ inputs.EXTERNAL == 'false' && inputs.SITE_WIDE == 'false' }}
      shell: bash
      run: a11ywatch scan --url ${{ inputs.WEBSITE_URL }} --save

    - name: A11yWatch Scan [External]
      if: ${{ inputs.EXTERNAL == 'true' && inputs.SITE_WIDE == 'false' }}
      shell: bash
      run: a11ywatch scan --url ${{ inputs.WEBSITE_URL }} --external --save

    - name: A11yWatch Crawl [Local]
      if: ${{ inputs.EXTERNAL == 'false' && inputs.SITE_WIDE == 'true' }}
      shell: bash
      run: docker logs crawler --follow & (a11ywatch crawl --url ${{ inputs.WEBSITE_URL }} --save)

    - name: A11yWatch Crawl [External]
      if: ${{ inputs.EXTERNAL == 'true' && inputs.SITE_WIDE == 'true' }}
      shell: bash
      run: a11ywatch crawl --url ${{ inputs.WEBSITE_URL }} --external --save

    - name: Scan Results Check
      id: a11ywatch-results-generator
      shell: bash
      run: |
        # get results path
        results_path="$(a11ywatch --find-results)"

        website_issues=$(a11ywatch --results-issues)
        error_limit=${{ inputs.FAIL_ERROR_COUNT }}
        error_count=${error_limit:-0}

        if [ "$website_issues" -gt 0 ]; then
          echo "Issues detected: $website_issues"

          if [ "$error_count" -gt 0 ]; then
            if [ $website_issues -gt "$error_count" ]; then
                echo "Failed accessibility test!"
                exit 1
            fi
          fi
        fi

        results_json="$(a11ywatch -r)"

        echo "::set-output name=results::$(echo ${results_json})"
        echo "::set-output name=issues::$(echo ${website_issues})"

    - name: Post Stats to GitHub PR
      shell: bash
      if: ${{ github.event_name == 'pull_request' && inputs.DISABLE_PR_STATS  == 'false' }}
      run: |
        # post github
        INPUT_GH_TOKEN=${{ inputs.TOKEN }}
        GH_ACTION_TOKEN=${{ github.token }}
        GH_TOKEN="${INPUT_GH_TOKEN:-$GH_ACTION_TOKEN}"

        results_path="$(a11ywatch --find-results)"
        gh_api_url="$(a11ywatch --github-api-url)"
        website_issues=$(a11ywatch --results-issues)

        # send pr results if issues exist
        if [ "$website_issues" -gt 0 ]; then
          # check for open pr
          pr_response=$(curl --location --request GET "$gh_api_url" \
              -H "Authorization: token $GH_TOKEN")

          if [ $(echo $pr_response | jq length) -eq 0 ]; then
            echo "No PR found to update"
          else          
            pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")

            # extract the results to a file
            body="$(a11ywatch --github-results-path extract --platform github)"
            
            # get results of the file path 
            gh_file="@$(a11ywatch --github-results-path)"

            # post comment to github
            curl -X POST -d "$gh_file" "$pr_comment_url" \
              -H "Authorization: token $GH_TOKEN" \
              -H 'Content-Type: application/json'
          fi
        fi

    - name: Stop A11yWatch Service
      if: ${{ !inputs.EXTERNAL }}
      shell: bash
      run: a11ywatch stop
