name: A11yWatchBot
on: [pull_request, push]
jobs:
  run-container:
    name: End to End
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        if: ${{ env.DOCKER_LAYER_CACHE }}
      - name: Install Rust
        if: steps.cache.outputs.cache-hit != 'true'
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - name: Install the A11yWatch CLI
        run: cargo install a11ywatch_cli --force
      - name: Add API token from secrets
        if: ${{ env.A11YWATCH_TOKEN }}
        run: a11ywatch --set-token $A11YWATCH_TOKEN
        env:
          A11YWATCH_TOKEN: ${{ secrets.A11YWATCH_TOKEN }}
      - name: Start A11yWatch Service
        if: ${{ !env.EXTERNAL }}
        run: a11ywatch start
      - name: Wait for Healthy Container
        if: ${{ !env.EXTERNAL }}
        run: |
          attempt=0

          while [ $attempt -le 15 ]; do
              attempt=$(( $attempt + 1 ))
              echo "Waiting for server to be up (attempt: $attempt)..."
              result=$(docker logs api)
              if grep -q 'Server ready' <<< $result ; then
                echo "A11yWatch ready!"
                break
              fi
              sleep 0.3
          done
      - name: Scan Website
        run: |
          #!/bin/bash
          # set defaults to env CLI options
          ext_var=${{ env.EXTERNAL }}
          site_wide_scan_var=${{ env.SITE_WIDE }}
          external_env=${ext_var:-false}
          site_wide_scan=${site_wide_scan_var:-false}

          if [[ "$site_wide_scan" = true ]]
          then
            site_wide_scan="--all"
          else
            site_wide_scan=""
          fi

          # run website scan
          if [[ "$external_env" = true ]]
          then
            echo "running external"
            a11ywatch scan --url $WEBSITE_URL --external --save
          else
            echo "running internal commands"
            a11ywatch scan --url $WEBSITE_URL --save
          fi

          results_path="$(a11ywatch --find-results)"

          # get issues count
          issues=$(jq '.website.issue | length' $results_path)
          error_limit=${{ env.FAIL_ERROR_COUNT }}
          error_count=${error_limit:-0}

          if [ "$issues" -gt 0 ]; then
            echo "Issues detected $issues"

            if [ "$error_count" -gt 0 ]; then
              if [ $issues -gt "$error_count" ]; then
                  echo "Failed accessibility test!"
                  exit 1
              fi
            fi
          fi
        env:
          WEBSITE_URL: ${{ secrets.WEBSITE_URL }}
          FAIL_ERROR_COUNT: ${{ secrets.FAIL_ERROR_COUNT }}
      - name: Post Stats to GitHub PR
        run: |
          results_path="$(a11ywatch --find-results)"
          gh_api_url="$(a11ywatch --github-api-url)"

          pr_response=$(curl --location --request GET $gh_api_url \
          -u $A11YWATCH_GH_USER:$A11YWATCH_GH_USER_TOKEN)

          if [ $(echo $pr_response | jq length) -eq 0 ]; then
            echo "No PR found to update"
          else
            pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")

            body="$(a11ywatch extract -p github)"

            curl --location --request POST "$pr_comment_url" \
            -u $A11YWATCH_GH_USER:$A11YWATCH_GH_USER_TOKEN \
            --header 'Content-Type: application/json' \
            --data-raw "$body"
            
          fi

      - name: Stop A11yWatch Service
        if: ${{ !env.EXTERNAL }}
        run: a11ywatch stop
